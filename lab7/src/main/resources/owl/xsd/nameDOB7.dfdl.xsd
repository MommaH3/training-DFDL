<?xml version="1.0" encoding="UTF-8"?> 
<!-- Copyright (c) 2019 Tresys Technology, LLC. All rights reserved. -->

<xs:schema 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" 
  xmlns:tns="http://example.com"
  xmlns:ex="http://example.com"
  targetNamespace="http://example.com">

  <xs:include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd" />

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">

      <dfdl:format ref="tns:GeneralFormat"
                   representation="binary"
                   byteOrder="bigEndian"
                   bitOrder="mostSignificantBitFirst"
                   encoding="ASCII"
                   lengthUnits='bits'
                   alignmentUnits="bits"
                   alignment="8"
                   occursCountKind="expression"
                   binaryNumberRep="binary"/>

    </xs:appinfo>
  </xs:annotation>

  <!-- Presence Indicators or PIs -->

  <xs:simpleType name="PI"
                 dfdl:lengthKind="explicit"
                 dfdl:length="1"
                 dfdl:alignment="1">
    <xs:restriction base="xs:unsignedByte"/>
  </xs:simpleType>

  <!-- NUL terminated strings -->

  <xs:simpleType name="zString"
                 dfdl:lengthKind="delimited"
                 dfdl:terminator="%NUL;">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:group name="discriminateAnyData">
    <xs:sequence>
      <xs:annotation>
        <xs:appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:discriminator testKind="pattern" testPattern="."/>
        </xs:appinfo>
      </xs:annotation>
    </xs:sequence>
  </xs:group>

  <!--
  EXERCISE

  Put all four PI elements in a reusable group.

  Study the dfdl:outputValueCalc expressions for each of these, and how they
  compute a 1 or 0 depending on whether the corresponding element exists
  or not. This is only used when unparsing.
  -->
  <xs:group name="piGroup">
    <xs:sequence>
      <xs:element name="lastNamePI" type="tns:PI"
                  dfdl:outputValueCalc='{ if (fn:exists(../lastName)) then 1 else 0 }'/>
      <xs:element name="firstNamePI" type="tns:PI"
                  dfdl:outputValueCalc='{ if (fn:exists(../firstName)) then 1 else 0 }'/>
      <xs:element name="middleNamePI" type="tns:PI"
                  dfdl:outputValueCalc='{ if (fn:exists(../middleName)) then 1 else 0 }'/>
      <xs:element name="DOBPI" type="tns:PI"
                  dfdl:outputValueCalc='{ if (fn:exists(../DOB)) then 1 else 0 }'/>
    </xs:sequence>
  </xs:group>

  <xs:element name="file">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="record" maxOccurs="unbounded" dfdl:occursCountKind="implicit">
          <xs:complexType>
            <xs:sequence>
              <xs:group ref="tns:discriminateAnyData"/>
              <xs:sequence dfdl:hiddenGroupRef="tns:piGroup" />
              <xs:element name="lastName" type="tns:zString" minOccurs="0"
                          dfdl:occursCount='{ ../lastNamePI }' />
              <xs:element name="firstName" type="tns:zString" minOccurs="0"
                          dfdl:occursCount='{ ../firstNamePI }' />
              <xs:element name="middleName" type="tns:zString" minOccurs="0"
                          dfdl:occursCount='{ ../middleNamePI }' />
              <xs:element name="DOB" type="xs:date" minOccurs="0"
                          dfdl:occursCount='{ ../DOBPI }'
                          dfdl:calendarPattern="MMddyyyy"
                          dfdl:calendarPatternKind="explicit"
                          dfdl:binaryCalendarRep="bcd"
                          dfdl:lengthKind="explicit"
                          dfdl:lengthUnits="bytes"
                          dfdl:length="4"
                          dfdl:alignment="8"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!--
  Below is a very advanced example.

  It computes the total length of the whole data structure, and stores it in the header.
  It computes the number of records and stores that at the front also.

  These above 2 things are *really bad ideas* because they completely defeat the
  ability of the data to be streamed when unparsing. The whole file of data is going
  to be buffered up so as to compute these lengths/counts before anything can be written out.

  But if it is forced to do so by the nature of the format like this, Daffodil will do
  all of that for you.

  This schema also computes, for each record, the length of the entirety of the data, and stores
  that in a header of each record. That part is a lot less problematic. It doesn't defeat
  streaming.

  Daffodil's streaming unparser handles all of this.

  -->

  <xs:group name="piGroup2">
    <xs:sequence>
      <!--
      Adding an extra element tier here named "flags", allows us to give it an
      explicit length of 8 bits.

      That appears to then allow Daffodil's schema compiler to prove everything after
      will be properly aligned, so no deadlocks of alignment and valueLength calculation can
      occur.

      This is an unmotivated trick, and the need for it may be a Daffodil bug.
      -->
      <xs:element name="flags" dfdl:lengthKind="explicit" dfdl:length="8">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="lastNamePI" type="tns:PI"
                        dfdl:outputValueCalc='{ if (fn:exists(../../lastName)) then 1 else 0 }'/>
            <xs:element name="firstNamePI" type="tns:PI"
                        dfdl:outputValueCalc='{ if (fn:exists(../../firstName)) then 1 else 0 }'/>
            <xs:element name="middleNamePI" type="tns:PI"
                        dfdl:outputValueCalc='{ if (fn:exists(../../middleName)) then 1 else 0 }'/>
            <xs:element name="DOBPI" type="tns:PI"
                        dfdl:outputValueCalc='{ if (fn:exists(../../DOB)) then 1 else 0 }'/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

    </xs:sequence>
  </xs:group>


  <xs:element name="file2">
    <xs:complexType>
      <xs:sequence>
        <!--
        Up front we store the length of the entire structure
        This completely defeats any unparser streaming
        -->
        <xs:element name="totalLen" type="xs:int" dfdl:lengthKind="implicit"
                    dfdl:outputValueCalc='{ dfdl:valueLength(../records, "bytes") }' />
        <xs:element name="records">
          <xs:complexType>
            <xs:sequence>
              <!--
              At the start of all records we store the record count.
              This also completely defeats any unparser streaming.
              -->
              <xs:element name="nRecords" type="xs:int" dfdl:lengthKind="implicit"
                    dfdl:outputValueCalc='{ fn:count(../record) }'/>
              <xs:element name="record" maxOccurs="unbounded" dfdl:occursCountKind="expression"
                  dfdl:occursCount='{ ../nRecords }'>
                <xs:complexType>
                  <xs:sequence>
                    <xs:group ref="tns:discriminateAnyData"/>
                    <!--
                    We store here the length of the data in each record. This
                    encompasses the piGroup flags, and the following data.

                    This is redundant, but illustrative.

                    A data format with this sort of internal header within a sub-record
                    does not necessarily destroy the ability of the format to be
                    streamed when unparsing.

                    These forward references get incrementally resolved as the records
                    arrive at the unparser.
                    -->
                    <xs:element name="dataLen" type="xs:int" dfdl:lengthKind="implicit"
                       dfdl:outputValueCalc='{ dfdl:valueLength(../data, "bytes") }' />
                      <xs:element name="data">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:sequence dfdl:hiddenGroupRef="tns:piGroup2" />
                              <xs:sequence>
                              <xs:element name="lastName" type="tns:zString" minOccurs="0"
                                          dfdl:occursCount='{ ../flags/lastNamePI }' />
                              <xs:element name="firstName" type="tns:zString" minOccurs="0"
                                          dfdl:occursCount='{ ../flags/firstNamePI }' />
                              <xs:element name="middleName" type="tns:zString" minOccurs="0"
                                          dfdl:occursCount='{ ../flags/middleNamePI }' />
                              <xs:element name="DOB" type="xs:date" minOccurs="0"
                                          dfdl:occursCount='{ ../flags/DOBPI }'
                                          dfdl:calendarPattern="MMddyyyy"
                                          dfdl:calendarPatternKind="explicit"
                                          dfdl:binaryCalendarRep="bcd"
                                          dfdl:lengthKind="explicit"
                                          dfdl:lengthUnits="bytes"
                                          dfdl:length="4"/>
                              </xs:sequence>
                          </xs:sequence>
                        </xs:complexType>
                     </xs:element> 
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
</xs:schema>
